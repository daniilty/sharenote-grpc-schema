// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserNoteGroupsClient is the client API for UserNoteGroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserNoteGroupsClient interface {
	GetUserNoteGroups(ctx context.Context, in *GetUserNoteGroupsRequest, opts ...grpc.CallOption) (*GetUserNoteGroupsResponse, error)
	DeleteUserNoteGroup(ctx context.Context, in *DeleteUserNoteGroupRequest, opts ...grpc.CallOption) (*DeleteUserNoteGroupResponse, error)
}

type userNoteGroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewUserNoteGroupsClient(cc grpc.ClientConnInterface) UserNoteGroupsClient {
	return &userNoteGroupsClient{cc}
}

func (c *userNoteGroupsClient) GetUserNoteGroups(ctx context.Context, in *GetUserNoteGroupsRequest, opts ...grpc.CallOption) (*GetUserNoteGroupsResponse, error) {
	out := new(GetUserNoteGroupsResponse)
	err := c.cc.Invoke(ctx, "/sharenote.schema.UserNoteGroups/GetUserNoteGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userNoteGroupsClient) DeleteUserNoteGroup(ctx context.Context, in *DeleteUserNoteGroupRequest, opts ...grpc.CallOption) (*DeleteUserNoteGroupResponse, error) {
	out := new(DeleteUserNoteGroupResponse)
	err := c.cc.Invoke(ctx, "/sharenote.schema.UserNoteGroups/DeleteUserNoteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserNoteGroupsServer is the server API for UserNoteGroups service.
// All implementations must embed UnimplementedUserNoteGroupsServer
// for forward compatibility
type UserNoteGroupsServer interface {
	GetUserNoteGroups(context.Context, *GetUserNoteGroupsRequest) (*GetUserNoteGroupsResponse, error)
	DeleteUserNoteGroup(context.Context, *DeleteUserNoteGroupRequest) (*DeleteUserNoteGroupResponse, error)
	mustEmbedUnimplementedUserNoteGroupsServer()
}

// UnimplementedUserNoteGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedUserNoteGroupsServer struct {
}

func (UnimplementedUserNoteGroupsServer) GetUserNoteGroups(context.Context, *GetUserNoteGroupsRequest) (*GetUserNoteGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNoteGroups not implemented")
}
func (UnimplementedUserNoteGroupsServer) DeleteUserNoteGroup(context.Context, *DeleteUserNoteGroupRequest) (*DeleteUserNoteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserNoteGroup not implemented")
}
func (UnimplementedUserNoteGroupsServer) mustEmbedUnimplementedUserNoteGroupsServer() {}

// UnsafeUserNoteGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserNoteGroupsServer will
// result in compilation errors.
type UnsafeUserNoteGroupsServer interface {
	mustEmbedUnimplementedUserNoteGroupsServer()
}

func RegisterUserNoteGroupsServer(s grpc.ServiceRegistrar, srv UserNoteGroupsServer) {
	s.RegisterService(&UserNoteGroups_ServiceDesc, srv)
}

func _UserNoteGroups_GetUserNoteGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNoteGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNoteGroupsServer).GetUserNoteGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sharenote.schema.UserNoteGroups/GetUserNoteGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNoteGroupsServer).GetUserNoteGroups(ctx, req.(*GetUserNoteGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserNoteGroups_DeleteUserNoteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserNoteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserNoteGroupsServer).DeleteUserNoteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sharenote.schema.UserNoteGroups/DeleteUserNoteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserNoteGroupsServer).DeleteUserNoteGroup(ctx, req.(*DeleteUserNoteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserNoteGroups_ServiceDesc is the grpc.ServiceDesc for UserNoteGroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserNoteGroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sharenote.schema.UserNoteGroups",
	HandlerType: (*UserNoteGroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserNoteGroups",
			Handler:    _UserNoteGroups_GetUserNoteGroups_Handler,
		},
		{
			MethodName: "DeleteUserNoteGroup",
			Handler:    _UserNoteGroups_DeleteUserNoteGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_notes.proto",
}
